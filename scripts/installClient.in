#!/opt/bin/perl
#
# Unix Install script for Ganymede client stuff
#
# Last Revision Changed: $Rev$
# Last Changed By: $Author$
# Last Mod Date: $Date$
#
# Jonathan Abbey - jonabbey@arlut.utexas.edu
#
############################################################

use File::Copy;
use Cwd;

$perlname = "<#PERLEXE#>";
$homedir = $ENV{HOME};
&removelastslash($homedir);

# Make sure our current working directory is in the same directory as
# the script

$rootdir = &dirname($0);
chdir($rootdir);

# This script needs to get a several pieces of information from
# the user, including:
#
# Where is the jvm (java command)?
# Where should the client tree be placed?
# What system is the server running on?
# What superuser name is desired?
#
# Everything else can be reasonably derived from the above.

@steps = ("JVM", "SYSTEMNAME","REGISTRYPORT", "CLIENTINSTALL");

%vars = ("JVM" => "<#JAVADIR#>",
         "SYSTEMNAME" => "",
         "REGISTRYPORT" => "1099",
         "CLIENTINSTALL" => "");

%descrip = ("JVM" => "Where are the Java binaries installed?",
	    "SYSTEMNAME" => "What is the name of the system that the server will run on?",
	    "REGISTRYPORT" => "What port is the RMI registry supporting Ganymede running on?",
            "CLIENTINSTALL" => "Where should the client binaries be installed?");

$template = "scripts/client.properties.template";

####################

# We don't want to hold back stdout

$| = 1;

print <<ENDINTRO;

Ganymede Client Install Script
-------------------------------------

ENDINTRO

# Make sure we're running from the right directory

open TEST, $template or $failure = 1;

if (!$failure) {
  close TEST;
} else {
  print "*error* couldn't find client properties template.  not run from install directory?\n";
  exit;
}

if (!-f "jars/ganymede.jar") {
  print "Error couldn't find ganymede.jar file.\n";
  print "Be sure and do an 'ant jars' after building the Ganymede server.\n";
  exit;
}

# Read the information from the user

$vars{"SYSTEMNAME"} = `hostname`; # default hostname
chop $vars{"SYSTEMNAME"}; # take off trailing newline

foreach $step (@steps) {

  $success = 0;

  while (!$success) {

    print $descrip{$step};
    print " [$vars{$step}] ";

    $old = $vars{$step};
    $inp = <>;

    chop $inp; # cut off newline

    if ($inp ne "") {
      $vars{$step} = $inp;
    }

    if ($vars{$step}eq "") {
      $success = 0;
      print "*You must provide a value for this field*\n";
    } else {
      $success = 1;
    }

    if (($step eq "CLIENTINSTALL") ||
	($step eq "JVM")) {

      $vars{$step} = &canonify($vars{$step});

      if ($vars{$step} !~ /^\//) {
	print "*Pathname could not be resolved, please enter a full path.\n";
	$success = 0;
      }
    }

    if ($step eq "REGISTRYPORT") {
	if ($vars{$step} > 65535) {
	    print "*Port numbers must be less than 65536.\n";
	    $vars{$step} = $old;
	    $success = 0;
	}

	if ($vars{$step} <= 0) {
	    print "*Port numbers must be greater than 0.\n";
	    $vars{$step} = $old;
	    $success = 0;
	}
    }

    if ($step eq "JVM") {
      $version = &identifyjvm($vars{"JVM"}."/java", 0);

      if ($version == 0) {
	die "*Can't find a valid java command*\n\nAborting..";
      }
    }
  }
}

# Ok, we've got everything

print <<ENDCONFIG;

Testing configuration information

ENDCONFIG

# can we make the client install directory?

if (!-d $vars{"CLIENTINSTALL"}) {
  &removelastslash($vars{"CLIENTINSTALL"});
  mkdir($vars{"CLIENTINSTALL"}, 0755) or die "*Couldn't make the client install directory*\n";
  print "Made the client install directory ok\n";
} else {
  print "Found the client install directory ok\n";

  if (-f $vars{"CLIENTINSTALL"}."/ganymede.properties") {
    die "*Error, can't install client into ".$vars{"CLIENTINSTALL"}.".. server installed in this directory.";
  }
}

print "\nConfiguration seems to check out.\n\n";
print "Installing";

$installdir = $vars{"CLIENTINSTALL"};

&makedir("$installdir/bin", 0755); print ".";
&makedir("$installdir/jars", 0755); print ".";

open OUTPUT, ">$installdir/README" or die "Couldn't open $installdir/README!";
print OUTPUT <<ENDREADME;

Ganymede Clients
-----------------------

This directory contains the clients for the Ganymede directory
management system.

The bin directory contains the actual executable clients.  These
clients are actually bourne shell scripts that invoke the Java VM on
the Ganymede client classes, held in the jars directory.

The client scripts were customized at install time with their
installation location.  If you move these client scripts to
another location, you will have to edit the scripts to reflect
their new location, or provide a symbolic link from the old
client installation directory to the new location.

The client.properties file in this directory is consulted by the
Ganymede clients to determine where the Ganymede server
is.  If you want to retarget the clients to another location for the
Ganymede server, you should be able to accomplish this by
simply editing the client.properties file.

ENDREADME

close OUTPUT;
chmod 0644, "$installdir/README"; print ".";

copy("COPYRIGHT", "$installdir/COPYRIGHT"); print ".";
copy("README.xml", "$installdir/README.xml"); print ".";

copy("jars/ganymede.jar", $installdir."/jars/ganymede.jar"); print ".";
copy("jars/ganymedeAdmin.jar", $installdir."/jars/ganymedeAdmin.jar"); print ".";

# Copy and process the properties file into place

%clientconvert = ("ganymede.serverhost" => $vars{"SYSTEMNAME"},
		  "ganymede.registryPort" => $vars{"REGISTRYPORT"});

open INPUT, $template or die "Couldn't open client properties template!";
open OUTPUT, ">".$installdir."/client.properties" or die "Couldn't write client.properties";

print "\nCustomizing client.properties\n";

while (<INPUT>) {

    if (!/^([^\#=]*)=/) {
	print OUTPUT $_;
    } elsif (defined $clientconvert{$1}) {
	print OUTPUT "$1=$clientconvert{$1}\n";
    } else {
      if ($debug) {
	print "Error.. unrecognized template entry $1 - copying template value\n";
      }

      print OUTPUT $_;
    }
}

close INPUT;
close OUTPUT;

# Copy and process the ganymede script into place

print "\nCustomizing Ganymede script\n";

%runconvert = ("JAVA" => $vars{"JVM"}."/java",
	       "PROPERTIES" => $installdir."/client.properties",
	       "CLASSPATH" => $installdir."/jars/ganymede.jar");

$template = "scripts/ganymede.template";

open INPUT, "$template" or die "Couldn't open $template!";
open OUTPUT, ">".$installdir."/bin/ganymede" or die "Couldn't write ganymede";

while (<INPUT>) {

    if (!/^([A-Z]*)=/) {
	print OUTPUT $_;
    } elsif (defined $runconvert{$1}) {
	print OUTPUT "$1=$runconvert{$1}\n";
    } else {
      if ($debug) {
	print "Error.. unrecognized template entry $1 - copying template value\n";
      }

      print OUTPUT $_;
    }
}

close INPUT;
close OUTPUT;

chmod 0755, "$installdir/bin/ganymede";

# Copy and process the xmlclient script into place

print "\nCustomizing xmlclient script\n";

%runconvert = ("JAVA" => $vars{"JVM"}."/java",
	       "PROPERTIES" => "$installdir/client.properties",
	       "CLASSPATH" => "$installdir/jars/ganymede.jar");

open INPUT, "scripts/xmlclient.template" or die "Couldn't open xmlclient template!";
open OUTPUT, ">$installdir/bin/xmlclient" or die "Couldn't write xmlclient";

while (<INPUT>) {

    # xmlclient is now a perl script.  fix up the interpreter path

    s/\/opt\/bin\/perl/$perlname/g;

    if (!/^([A-Z]*)=/) {
	print OUTPUT $_;
    } elsif (defined $runconvert{$1}) {
	print OUTPUT "\$" . "$1=\"$runconvert{$1}\";\n";
    } else {
      if ($debug) {
	print "Error.. unrecognized template entry $1 - copying template value\n";
      }

      print OUTPUT $_;
    }
}

close INPUT;
close OUTPUT;

chmod 0755, "$installdir/bin/xmlclient";

# Copy and process the ganymedeAdmin script into place

print "\nCustomizing ganymedeAdmin script\n";

%runconvert = ("JAVA" => $vars{"JVM"}."/java",
	       "PROPERTIES" => "$installdir/client.properties",
	       "CLASSPATH" => "$installdir/jars/ganymedeAdmin.jar");

$template = "scripts/ganymedeAdmin.template";

open INPUT, "$template" or die "Couldn't open $template!";
open OUTPUT, ">$installdir/bin/ganymedeAdmin" or die "Couldn't write ganymedeAdmin";

while (<INPUT>) {

    if (!/^([A-Z]*)=/) {
	print OUTPUT $_;
    } elsif (defined $runconvert{$1}) {
	print OUTPUT "$1=$runconvert{$1}\n";
    } else {
      if ($debug) {
	print "Error.. unrecognized template entry $1 - copying template value\n";
      }

      print OUTPUT $_;
    }
}

close INPUT;
close OUTPUT;

chmod 0755, "$installdir/bin/ganymedeAdmin";

# Copy and process the changePassword script into place

print "\nCustomizing changePassword script\n";

%runconvert = ("JAVA" => $vars{"JVM"}."/java",
	       "PROPERTIES" => "$installdir/client.properties",
	       "JARDIR" => "$installdir/jars");

open INPUT, "scripts/changePassword.template" or die "Couldn't open changePassword template!";
open OUTPUT, ">$installdir/bin/changePassword" or die "Couldn't write changePassword";

while (<INPUT>) {
  if (!/^([A-Z]*)=/) {
    print OUTPUT $_;
  } elsif (defined $runconvert{$1}) {
    print OUTPUT "$1=$runconvert{$1}\n";
  } else {
    print OUTPUT $_;
  }
}

close INPUT;
close OUTPUT;

chmod 0755, "$installdir/bin/changePassword";

print "\nDone\n";

#########################################################################
#
#                                                                 makedir
#
# input: 1) a directory to make
#        2) octal chmod bits
#
#########################################################################
sub makedir{
  my ($dirpath, $chmod) = @_;

  if (!-e $dirpath) {
    mkdir ($dirpath, $chmod) or die("*Couldn't make $dirpath*");
  }
}

#########################################################################
#
#                                                                 copydir
#
# input: 1) a directory to copy from
#        2) directory target
#
#########################################################################
sub copydir{
  my ($source, $target) = @_;
  my (@dirs, $file);

  &removelastslash($source);
  &removelastslash($target);

  if (!-e $target) {
    &makedir($target, 0750);
  }

  opendir SOURCE, $source || die "Failure in copydir";
  @dirs = readdir SOURCE;
  closedir SOURCE;

  foreach $file (@dirs) {
    if (($file eq ".") || ($file eq "..")) {
      next;
    }

    if (-d "$source/$file") {
      &copydir("$source/$file", "$target/$file"); #recurse
    } else {
      copy("$source/$file", "$target/$file");
    }
  }
}

#########################################################################
#
#                                                         removelastslash
#
# input: a pathname to test
#
# this function will remove a trailing slash from the directory name
# input
#
#########################################################################
sub removelastslash{
  if ($_[0] =~ /\/$/) {
    chop $_[0];
  }

  return $_[0];
}

#########################################################################
#
#                                                             identifyjvm
# input: filename of the jvm executable
#
# returns: 0 if the jvm couldn't be found or is not a valid version for
# Ganymede, or 1 if we found a valid jvm.
#
#
#########################################################################
sub identifyjvm {
  my ($jvm,$dodie) = @_;
  my $versionString, $errorString;

  if (!-f $jvm) {
    return 0;
  }

  $versionString = `$jvm -version 2>&1`;

  if (($versionString =~ /\"1\.2/) ||
      ($versionString =~ /\"1\.3/) ||
      ($versionString =~ /\"1\.4/))
    {
      $errorString = "Error, Ganymede requires Java version 5 or later.   $jvm reports the following version information:\n$versionString\n";

      if ($dodie)
        {
          die $errorString;
        }
      else
        {
          print $errorString;
          return 0;
        }
    }

  if (($versionString =~ /1\.4/) ||
      ($versionString =~ /1\.5/) ||
      ($versionString =~ /1\.6/) ||
      ($versionString =~ /1\.7/))
    {
      return 1;
    }
}

#########################################################################
#
#                                                                 resolve
#
# input: $dir - absolute pathname of current directory
#        $link - string containing the readlink() results for a
#                symbolic link in $dir to be processed
#
# returns: absolute pathname of the target of the symbolic link
#
#########################################################################
sub resolve{
    my($dir, $link) = @_;
    my(@alinkp, $d, $alinkp);

    # make array representations of
    # the current directory and symbolic link

    # if we have a leading / in our $dir or $link,
    # we'll need to shift to get rid of the leading
    # empty array element

    @dirp=split(/\//, $dir);
    shift(@dirp) if (!($dirp[0]));
    @linkp=split(/\//, $link);
    shift(@linkp) if (!($linkp[0]));

    # @alinkp is an array that we will build to contain the absolute link
    # target pathname.  If the link does not begin with a /, it is a relative link,
    # and we need to place our current directory into the @alinkp array.

    if ($link !~ /^\//) {
	@alinkp=@dirp;
    }

    # modify the @alinkp array according
    # to each path component of the @linkp array
    # (an array representation of the symbolic link
    # given to us), to arrive at the ultimate absolute
    # pathname of the symbolic link

    $d = shift(@linkp);

    while ($d) {
	if ($d eq "..") {
	    pop(@alinkp);
	}
	elsif ($d ne "."){
	    push(@alinkp, $d);
	}
	$d=shift(@linkp);
    }

    $"='/';

    # perl functions return the value of the last expression
    # in the subroutine

    $alinkp="/@alinkp";
}

#########################################################################
#
#                                                                canonify
#
# input: $pathname - a directory or filename path, may be relative
# or use ~ to represent the current user's home directory
#
# returns: absolute location of the givevn pathname
#
#########################################################################
sub canonify {
  my ($pathname) = @_;
  my ($homedir);

  $pathname = &removelastslash($pathname);

  if (!(($pathname =~ /^\//) || ($pathname =~ /^~\//))) {
    $pathname = &resolve(cwd(), $pathname);
  }

  if ($pathname =~ /^~\//) {
    $homedir = $ENV{'HOME'};
    &removelastslash($homedir);
    $pathname =~ s/\~\//$homedir\//g;
  }

  return $pathname;
}

#########################################################################
#
#                                                                 dirname
#
# input: 1) a filename path
#
# return: the directory containing the filename given
#
#########################################################################
sub dirname{
  my ($dirpath) = @_;
  my (@comps);

  $dirpath = &canonify($dirpath);

  @comps = split(/\//, $dirpath);
  pop @comps;
  return join('/', @comps);
}
