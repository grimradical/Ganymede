#!/usr/bin/perl
#
# This script is designed to assist the Ganymede server by quickly
# scanning through the Ganymede log file and printing out only those
# lines which the Ganymede server is seeking to retrieve.
#
# The Ganymede server is not very efficient at doing this, and by
# using an external filtering program the Ganymede server can provide
# object history from its log file much much more quickly than if the
# server had to filter out all the irrelevant history details itself
# with the current server code.
#
# $Revision$
# $Date$
# $Name:  $
#
# Robbie Sternenberg
# robbie@arlut.utexas.edu
#
# Jonathan Abbey
# jonabbey@arlut.utexas.edu
#
############################################################

$| = 1;
$debug = 0;

##########################################################################
#
#                                                                 find_arg
# input: $token, @args
#
# output: the string argument following the single character
# $token.. for instance, if $token is 'f', find_arg will return the
# string following -f in the @args list, if it can be found.
#
# if the token can't be found following a dash character, an empty string
# will be returned.
#
#
##########################################################################

sub find_arg {
  my ($token, @args) = @_;

  my ($i, $word, $localword, $tokenregexp);

  $i = 0;
  $localword = "";

  $tokenregexp = $token;
  $tokenregexp =~ s/(\W)/\\$1/g;	# backslash escape any special chars

  while ($i <= $#args) {
    if ($args[$i] =~ /^-(.*)$/) {
      $word=$1;

      if ($word =~ /^$tokenregexp/) {
        if (length($word)==1) {
          $localword = $args[($i + 1)];
        } else {
          $word =~ /^$tokenregexp(.*)$/;
          $localword = $1;
        }

        last;
      }
    }

    $i++;
  }

  if ($localword eq "") {
    $localword = undef;
  }

  return $localword;
}

##########################################################################
#
#                                                            read_switches
# input: $switchlist, @args
#
# The $switchlist string should be a concatenation of the
# permissible single-character command line flags.
#
# output: sets flags in the global %switches hash
#
##########################################################################

sub read_switches {
  my ($switchlist, @args) = @_;

  my ($i, $word, @switches);

  $i = 0;
  $localword = "";

  while ($i <= $#args && $args[$i] =~ /^-(.*)$/) {
    $word=$1;
    $i++;

    # the switches in the following regexp can accept arguments, so
    # we'll skip past the next token if we see one of them naked.

    if ($word =~ /^[ies]/) {
      if (length($word)==1) {
	$i++;
      }
      next;
    }

    if ($word =~ /(^[$switchlist]+)$/) {
      @switches= split (//, $1);
      for $switch (@switches) {
	$switches{$switch}="-$switch";
      }
    } else {
      print "\"$word\" is an invalid command entry!\n\n";
      oops_usage();
    }
  }
}

##########################################################################
#
#                                                         is_start_of_line
#
# Returns true if FILE is pointing to the first character of a line
# (i.e., the character before us is a newline or the start of the file)
#
##########################################################################

sub is_start_of_line {

  my ($line);

  my $pos = tell FILE;

  if ($pos == 0) {
    return 1;
  }

  seek(FILE, -1, 1);
  read(FILE, $line, 1);

  if ($line eq "\n") {
    return 1;
  }

  return 0;
}

##########################################################################
#
#                                                       find_previous_line
#
# This subroutine finds the seek point for the start of the last line
# prior to $newpos in FILE
#
##########################################################################

sub find_previous_line {
  my ($newpos) = @_;

  $debug && print "find_previous_line($newpos)\n";

  my ($backpos, $line, $lastfound, $jump);

  $backpos = $newpos;
  $jump = -1;
  $lastfound = -1;

  # step back 64 bytes at a time from $newpos until we find the
  # last \n before $newpos

  while ($lastfound == -1 && $backpos > 0) {
    $backpos = $backpos - 64;

    if ($backpos < 0) {
      $backpos = 0;
    }

    seek(FILE, $backpos, 0);

    read(FILE, $line, 64);

    $jump = -1;

    do {
      $lastfound = $jump;
      $jump = index($line, "\n", $jump + 1);
    } until ($jump == -1);
  }

  # and return the location we need to go to

  return $backpos + $lastfound + 1;  # will be 0 on degenerate case
}

##########################################################################
#
#                                                         seek_start_point
#
# This subroutine does a binary search through FILE looking for the
# first event after the specified start date.
#
##########################################################################

sub seek_start_point {
  my ($startdate, $lowpos, $highpos) = @_;

  my ($pos, $line, $linedate);

  if ($lowpos == $highpos) {
    $debug && print "Oops, got stuck";
    return;
  }

  $pos = int (($lowpos + $highpos) / 2);

  seek(FILE, $pos, 0);

  if (!is_start_of_line()) {
    $pos = find_previous_line($pos);
    seek(FILE, $pos, 0);
  } else {
    $pos = tell FILE;
  }

  # read a line for us to check against our target date

  $line = <FILE>;

  ($linedate) = split /\|/, $line;

  # transactions share the same date and we can't use our recursive
  # algorithm to find the beginning, since we can't differentiate
  # between lines with the same date.  if we have hit on a line that
  # occurs right on our start time (which is specified with
  # millisecond accuracy), we'll need to scootch back until we find
  # the first line that had that date.

  while ($startdate == $linedate) {
    $pos = find_previous_line($pos -1);

    seek FILE, $pos, 0;

    $line = <FILE>;

    $debug && print $line;

    ($linedate) = split /\|/, $line;

    if (($startdate > $linedate) || ($pos == 0)) {
      return;
    }
  }

  if ($startdate < $linedate) {
    $debug && print "startdate $startdate <= linedate $linedate\n";

    seek_start_point($startdate, $lowpos, find_previous_line($pos));
    return;
  } else {
    $debug && print "startdate $startdate > linedate $linedate\n";

    seek_start_point($startdate, tell FILE, $highpos);
    return;
  }
}

##########################################################################
#
#                                                               oops_usage
#
##########################################################################

sub oops_usage() {
  print "Usage: logscan.pl [-a] [-l] [-i invid number] [-s start_date in java timecode] [-e end date in java timecode]\n";
  print "\t-a: Search for admin invids rather than object invids\n";
  print "\t-l: Only retrieve login/logout type events\n";
  print "\t-s: Only retrieve events more recent than the start date, which is provided as a Java timecode\n";
  print "\t-e: Only retrieve events that occur before recent the end date, which is provided as a Java timecode\n";
  exit 1;
}

################################################################################

$file = "<<LOGFILE>>";		# this will be replaced on install

if (@ARGV == 0) {
  oops_usage();
}

# which field in the log lines are we going to look at for the invid
# we're filtering on?

$fieldindex = 6;
$dologins = 0;

# let's figure out our command line options

read_switches('al', @ARGV);

if (defined $switches{'a'}) {
  # we're doing an admin invid search, not an object invid search

  $fieldindex = 3;
}

if (defined $switches{'l'}) {
  $dologins = 1;
}

$javastartdate = find_arg('s', @ARGV);
$debug && print "javastartdate is $javastartdate\n";

$javaenddate = find_arg('e', @ARGV);
$debug && print "javaenddate is $javaenddate\n";

$invid = find_arg('i', @ARGV);
$debug && print "invid is $invid\n";

if (!defined $invid) {

  # we didn't get asked for an invid, which may be okay, or it may
  # mean that we are being called by an earlier version of the
  # Ganymede server using the old calling sequence, with the invid
  # being mandatory as the last parameter on our command line.
  #
  # check for that, using a regexp to recognize what an invid should
  # look like.

  $invid = $ARGV[$#ARGV];

  if ($invid !~ /^[0-9]+:[0-9]+$/) {
    $invid = undef;
  }
}

#
# Okay, we've got all of our arguments, now.
#
# If we've got a start date set, we'll want to do a binary
# search through the file to find the start of the region we
# want to process
#

open FILE, $file || die "Couldn't open $file.\n";

if (defined $javastartdate) {
  ($size) = (stat($file))[7];
  seek_start_point($javastartdate, 0, $size);
}

while (<FILE>) {

  # if we're looking for a specific invid, let's see if the line has
  # invid in it

  if (!defined $invid || /$invid/) {

    @fields = split(/\|/);

    if (defined $javaenddate && $javaenddate < $fields[0]) {
      close FILE;
      exit 0;
    }

    my $token = $fields[2];

    if ($dologins xor ($token eq "normallogin" ||
                       $token eq "normallogout" ||
                       $token eq "abnormallogout")) {
      next;
    }

    if (!(defined $invid) ||
        ($fields[$fieldindex] =~ /(,|^)$invid(,|$)/) ||
        ($fields[$fieldindex] =~ /^$invid$/)) {

      print $_;

      # we want to show all events in a transaction block, even
      # the endtransaction events which don't include the object
      # invids that we are scanning for.  So, when we see a
      # starttransaction, we just print out lines for as long
      # as we see the transaction id.

      if (@fields[2] =~ /starttransaction/) {

	$pid = @fields[5];

	while ($pid) {
	  $_ = <FILE>;

	  if (/$pid/) {
	    print $_;
	  } else {
	    $pid = 0;
	  }
	}
      }
    }
  }
}

close FILE;
exit 0;
