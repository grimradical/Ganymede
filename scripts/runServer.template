#!/bin/sh
#
# Ganymede Server Run Script
# 
############################

## This section is customized by the server install script

# These lines should be in the form X=Y, with nothing else on
# the line.. they are customized by the installServer.perl
# script

JAVA=/usr/bin/java
RMIREGISTRY=/usr/bin/rmiregistry
RMIPORT=1099
PROPERTIES=ganymede.properties
CLASSPATH=jars/ganymedeServer.jar:jars/custom.jar:jars/password.jar
INSTALLDIR=/var/ganymede

############################################### 

trap "echo Aborted" 2

echo "Running Ganymede Server"

export CLASSPATH

# Set a higher upper limit on the number of descriptors so that Ganymede
# doesn't run out while doing big builds
#
# This may be Solaris-specific, so use with caution if you're on another
# operating system.

#ulimit -n 128

# Run the RMI registry to provide remote name lookup for the server

echo
echo "Attempting to start rmiregistry"

$RMIREGISTRY $RMIPORT &

echo
echo "Started rmiregistry"
echo

# Below this point we have a few choices of invocation lines that
# actually run your JVM on the Ganymede server.. there are two for JDK
# 1.2/1.3, which has a standard way of expressing whether or not
# JITting should be performed, and one for JDK 1.1 which does not.
#
# The minimum requirements to invoke the Ganymede server is to
# run the jvm on the arlut.csd.ganymede.Ganymede class file, with
# a command line parameter thereafter of properties=$PROPERTIES
# to give the Ganymede server access to its configuration file.
#
# The optional -resetadmin parameter forces the Ganymede server to
# reset the root-privileged supergash and the monitor passwords from
# the properties file.  If you forget the supergash password, the only
# way you can change it is to edit the ganymede.properties file in the
# server install directory and set the ganymede.defaultrootpass
# property to what you want the new supergash password to be, and to
# include -resetadmin on the java invocation line so that the Ganymede
# server will reset its password.
#
# You'll want to see a line that looks like this:
#
# ganymede.defaultrootpass=myNewSekretPassword
#
# It is perfectly reasonable to remove this line from the ganymede.properties
# file once you have the server started with the password you want,
# but if you ever forget..
#
# The optional debug=<debug_filename> parameter causes the Ganymede
# server to log all RMI calls made to it, as well as any exceptions
# that are thrown in response to RMI calls.  If the server is throwing
# an exception in response to something someone does in a Ganymede
# client or with the admin console, the RMI debug log will capture
# the exception's stack trace.
#
# The optional -forcelocalhost parameter will force the Ganymede
# server to ignore the fact that the configured hostname will
# map to the 127.0.0.1 loopback address.  If the Ganymede server
# prints an error message and refuses to start due to some problem
# relating to 127.0.0.1, adding -forcelocalhost to the java invocation
# line will tell the Ganymede server not to be so picky.  You'll then
# be able to use the Ganymede server from the local system, at least.
# See the Ganymede FAQ for more details on this option.
#
# The -resetadmin, -forcelocalhost and debug=XXX parameters should be placed
# on the invocation line after arlut.csd.ganymede.Ganymede.
#
# Other options included below include the -Xms32m and -Xmx128m jvm
# options, which force a minimum heap size of 32 megabytes and a
# maximum heap size of 128 megabytes.  If you are running an unusally
# large Ganymede installation, you may want to increase the maximum
# heap size to something greater than 128 megabytes.

#			     ----====----

# The following line runs with HotSpot JITTING on.  Any exceptions
# thrown by the server will not include line numbers, but the
# 'debug=$INSTALLDIR/debug.log' option does cause RMI calls to the
# server to be logged to debug.log.
#
# For JDK 1.2 and 1.3

#$JAVA -Xms32m -Xmx128m arlut.csd.ganymede.Ganymede -resetadmin debug=$INSTALLDIR/debug.log properties=$PROPERTIES

#			     ----====----

# The following line runs in non-JITTED mode through the
# -Djava.compiler=NONE option and supports runtime debugger attaching
# through the -Xdebug command line option, which can be useful in
# debugging deadlock conditions.
#
# NOTE: Some versions of the 1.2 (and 1.3?) JDK require additional boot classpath
# information on the invocation line when using -Xdebug to support remote
# debugging.  You'll need to edit this line to either take out the -Xdebug
# and -Xbootclasspath options, or you'll need to set the appropriate bootpath
# for your JDK installation.
#
# For JDK 1.2 and 1.3

#$JAVA -Xdebug -Djava.compiler=NONE -Xms32m -Xmx128m -Xbootclasspath:/usr/java1.2/jre/lib/rt.jar:/usr/java1.2/lib/tools.jar arlut.csd.ganymede.Ganymede -resetadmin debug=$INSTALLDIR/debug.log properties=$PROPERTIES

#			     ----====----

# If you are running the server under JDK 1.1, use the following line
# to run the server instead of the above two.  Note that Java 1.1 uses
# -ms32m and -mx128m instead of -Xms32m and -Xmx128m to specify default
# minimum and maximum heap sizes.
#
# For JDK 1.1

$JAVA -noasyncgc -ms32m -mx128m arlut.csd.ganymede.Ganymede -resetadmin debug=$INSTALLDIR/debug.log properties=$PROPERTIES
