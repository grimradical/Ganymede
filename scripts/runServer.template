#!/opt/bin/perl
#
# Ganymede Server Run Script
#
############################

########################################
#
# This section is customized by the server install script
#
########################################

# These lines should be in the form X=Y, with nothing else on
# the line.. they are customized by the installClient.perl
# script, and transformed into valid perl.
#
# Yes, I know the template doesn't look like valid perl.

JAVA=/usr/bin/java
PROPERTIES=ganymede.properties
CLASSPATH=jars/ganymedeServer.jar:jars/custom.jar:jython/jython.jar:jython/jython-lib.jar
INSTALLDIR=/var/ganymede

# ------------------------------------------------------------------ #

# Append any custom jar files added by the schema kit

if (opendir(DIR, "$INSTALLDIR/custom/lib")) {
    @jars = grep { /\.jar$/ } readdir(DIR);
    closedir(DIR);
}

foreach $jar (@jars) {
    $CLASSPATH .= ":$INSTALLDIR/custom/lib/$jar";
}

########################################
#
# Control variables for manual editing
#
########################################

# DEBUG controls whether the JVM that runs the Ganymede server will
# allow a Java debugger to attach to it.  If you want to allow a Java
# debugger to attach to the server, set 'DEBUG=-Xdebug'.  If you want
# to allow a debugger to attach to the server and you want to force
# the JVM to run in interpreted mode for some reason, set
# 'DEBUG=-Xdebug -Xint'.

$DEBUG="";

# MINHEAP controls the heap size that the JVM running the Ganymede
# server will initially allocate on startup, and which will be kept as
# a minimum heap size during execution. It should be expressed as a
# number followed by the letter 'm' for megabyte.  I.e.,
# 'MINHEAP=32m', or 'MINHEAP=64m'.

$MINHEAP="32m";

# MAXHEAP controls the maximum size the Ganymede server's heap can
# grow to.  It should be expressed as a number followed by the letter
# 'm' for megabyte.  I.e., 'MAXHEAP=256m', or 'MAXHEAP=2048m'.

$MAXHEAP="1024m";

# MAXPERMSPACE controls the amount of memory dedicated to class and
# method storage, and to interned Strings.  The Ganymede server tries
# to intern as many Strings as possible to reduce overall memory
# loading on the server's heap, but this requires that the JVM be told
# to increase the amount of space dedicated to the Permanent
# Generation memory zone.  If you receive an OutOfMemoryError while
# running the Ganymede server that complains of 'PermGen space', you
# need to increase this value.  Note that the directive that makes use
# of this variable below only works on Sun's HOTSPOT VM's.  The value
# should be expressed as a number followed by the letter 'm' for
# megabyte.  I.e., 'MAXPERMSPACE=128m'.

$MAXPERMSPACE="256m";

# These options control how frequently the Ganymede server will
# perform full heap GC to insure release of remote (client-side) RMI
# objects.  The Java 1.3 JDK defaults to doing full GC for RMI server
# apps once a minute, but the Ganymede server never releases
# references to clients or admin consoles unless the client or admin
# console quits/disconnects, in which case there's no need for the
# Ganymede server to tell the client/console that it can release
# objects.
#
# By setting the RMIGC control values to 3600000, we make the
# Ganymede server only perform mandatory full-heap GC once an
# hour, letting the lower impact generational garbage collection logic
# handle clean-up of transient objects

$RMIGC='-Dsun.rmi.dgc.client.gcInterval=3600000 -Dsun.rmi.dgc.server.gcInterval=3600000';

# This option forces the Ganymede server to use 64 bit
# cryptographically random object id numbers to make it extremely
# unlikely for a third party to be able to guess the RMI/JRMP object
# identifiers in use by whatever objects are exported for client
# access by Ganymede at any given time.
#
# You will generally always want this to be true, even though the use
# of a SecureRandom generator when Ganymede exports its RMI objects
# may impose some delay on Ganymede server startup as the secure
# random number generator determines its seed.  On a system with a
# kernel-supported /dev/random device, you shouldn't see this delay.  On
# systems that don't provide a reliable source of high entropy random
# numbers, you may see the delay.
#
# If you don't set this parameter to true and use SSL, however, the
# integrity of Ganymede's security model will be at considerable risk,
# and you should not allow access to a Ganymede server configured in
# such a fashion outside of a well-protected and trusted network
# environment.
#
# My recommendation is to always leave this set to true.
#
# See the following URL for more details about RMI security and randomIDs:
# http://www.essi.fr/~fron/SAR11/security/Building%20Secure%20Java%20RMI%20Servers.html

$RMISECURITY='-Djava.rmi.server.randomIDs=true';

# If you want to force the use of a specific language in the server,
# without respect to the native locale of the Java installation, you
# can modify this variable to specify a specific language, such as
#
# German:
# LANGUAGE=-Duser.language=de
#
# English:
# LANGUAGE=-Duser.language=en
#
# Leaving LANGUAGE blank will result in the default language for the
# Java installation being used, which is probably what you usually
# want.

$LANGUAGE="";

# ------------------------------------------------------------------ #

# The minimum requirements to invoke the Ganymede server is to
# run the jvm on the arlut.csd.ganymede.server.Ganymede class file, with a
# command line parameter thereafter of usedirectory=$INSTALLDIR to give
# the Ganymede server access to its configuration/database files. 
#
# The optional -resetadmin parameter forces the Ganymede server
# to reset the root-privileged supergash and the monitor passwords
# from the properties file.  If you forget the supergash password, the
# only way you can change it is to edit the ganymede.properties file
# in the server install directory and set the ganymede.defaultrootpass
# property to what you want the new supergash password to be, and to
# include -resetadmin on the java invocation line so that the
# Ganymede server will reset its password.
#
# You'll want to see a line that looks like this:
#
# ganymede.defaultrootpass=myNewSekretPassword
#
# It is perfectly reasonable to remove this line from the
# ganymede.properties file once you have the server started with the
# password you want, but if you ever forget, putting this property
# back into the ganymede.properties file and specifying -resetadmin
# will let you reinitialize the supergash password.
#
# The optional -logrmi parameter causes the Ganymede
# server to log all RMI calls made to it, as well as any exceptions
# that are thrown in response to RMI calls.  If the server is throwing
# an exception in response to something someone does in a Ganymede client
# or with the admin console, the RMI debug log will capture the
# exception's stack trace.
#
# If you use -logrmi as a switch, the RMI log will be placed in
# $INSTALLDIR/debug.log.  If you want to specify a different path
# to the RMI log, you can use logrmi as an assignment on the command
# line, as in
#
#	logrmi=/var/log/ganymede/rmi.log
#
# or the like.
#
# The optional -forcelocalhost parameter will force the Ganymede server
# to ignore the fact that the configured hostname will
# map to the 127.0.0.1 loopback address.  If the Ganymede
# server prints an error message and refuses to start due to some
# problem relating to 127.0.0.1, adding -forcelocalhost to the java
# invocation line will tell the Ganymede server not to be so
# picky.  You'll then be able to use the Ganymede server from
# the local system, at least.  See the Ganymede FAQ for more
# details on this option.
#
# The optional -suppressEmail parameter will force the Ganymede
# server to *not* send any email notifications for any reason.
# Think of it as an email "master cutoff switch".
#
# The optional -nossl parameter will force the Ganymede server not
# to use SSL to protect client/server communications.  You should only
# use this if you are needing to do high-speed offline bulk loading,
# or the like.
#
# The optional -magic_import parameter will cause the Ganymede server
# to allow loads from the xmlclient that specify invids for created
# objects on xml imports.  The -magic_import flag will also allow
# objects to be loaded from the xmlclient that will include their own
# creation and modification information.  This flag is designed to
# allow dumps from one Ganymede server, light hand massaging (if
# desired) to reflect schema changes, followed by reloading in a
# server with -magic_import to match everything up with the original
# server state.
#
# The optional telnet=<portnumber> parameter, if provided, causes the
# Ganymede server to open a Jython interpreter service on port
# <portnumber> which a Ganymede administrator with adequate privileges
# can telnet to.  The Jython interpreter only allows local logins,
# i.e., made from the local machine that is running the Ganymede
# server, in order to avoid allowing Ganymede account and password
# names to transit unprotected telnet.
#
# The -resetadmin, -forcelocalhost, -suppressEmail, -nossl, telnet,
# and -logrmi or logrmi=XXX parameters should be placed in the
# $EXTRAPARAMS variable.

$EXTRAPARAMS = "";

# ------------------------------------------------------------------ #

print "Running Ganymede Server\n";

# Set a higher upper limit on the number of descriptors so that
# Ganymede doesn't run out while doing big builds
#
# This may be Solaris-specific, so use with caution if you're on
# another operating system.

# ulimit -n 128

# SUNSPECIFIC contains directives specific to Sun's JVM.  If you're
# running on an IBM JVM, you will probably want to comment out
# this next line.
#
# The directive '-XX:MaxPermSize=$MAXPERMSPACE' is used to increase
# the portion of the server's heap that is dedicated to class and
# method memory, and most especially to interned string storage.  The
# Ganymede server aggressively interns Strings to avoid redundantly
# storing Strings in the heap.

$SUNSPECIFIC="-server -XX:MaxPermSize=$MAXPERMSPACE"

$ENV{'CLASSPATH'} = $CLASSPATH;

exec("$JAVA $SUNSPECIFIC $DEBUG -Xms$MINHEAP -Xmx$MAXHEAP $RMIGC $RMISECURITY $LANGUAGE arlut.csd.ganymede.server.Ganymede -resetadmin -logrmi usedirectory=$INSTALLDIR $EXTRAPARAMS > $INSTALLDIR/server.log 2>&1 &");
