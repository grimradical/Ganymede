#!/opt/bin/perl5
#
# sync_tree.client
#
# $Revision: 1.10 $
# $Date: 2001/07/14 02:03:31 $
#
# This perl script is designed to create a tree of files
# suitable for jar'ing into a downloadable archive.  Only
# those files that the client needs are to be downloaded.
#
#------------------------------------------------------------

# What classes in the ganymede package are necessary for the client?

@ganymede_classes = (
		     # Basic things

		     "Base", "BaseField", "BaseNode", "CatTreeNode",
		     "Category", "CategoryNode", "Client",
		     "CategoryDump", "CategoryTransport",
		     "BaseDump", "BaseListTransport",
		     "FieldInfo", "FieldTemplate", "FieldType",
		     "Invid", "NameSpace", "PermEntry", "PermMatrix",
		     "Server", "Session", "SpaceNode", "SchemaConstants",
		     "XMLSession",

		     # remote interfaces for fields

		     "boolean_field", "date_field", "db_field",
		     "db_object", "invid_field", "ip_field",
		     "num_field", "float_field", "pass_field",
		     "perm_field", "string_field", "ClientMessage",
		     "FileReceiver",

		     # things the client doesn't really need to use,
		     # but needs so it can handle deserialization of
		     # objects which reference them

		     "adminSession", "Admin", "SchemaEdit",
		     "DBBaseCategory", "DBObjectBase", "DBObject",
		     "GanymedeSession",

		     # query stuff

		     "Query", "QueryAndNode", "QueryDataNode",
		     "QueryNode", "QueryNotNode", "QueryOrNode",
		     "QueryResult", "DumpResult", "Result",
		     "ObjectHandle",

		     # Wizard stuff

		     "Ganymediator", "ReturnVal");

# What directory are we handling?

chdir("<#CLASSDIR#>/client_classes/arlut/csd/ganymede") || die "Couldn't cd to directory to clean";

# Clean it out

system("rm -rf *");

# Now link in all the base classes we need

print "\nLinking client classes from arlut.csd.ganymede\n\n";

foreach $family (@ganymede_classes) {

#    print "Linking family $family\n";

    opendir SOURCEDIR, "<#CLASSDIR#>/arlut/csd/ganymede" or die "couldn't open dir for families";
    @classes = grep /^$family[\$\.].*\.?class$/, readdir SOURCEDIR;
    closedir SOURCEDIR;
  
    foreach $file (@classes) {

	if ($file =~ /_Stub\.class$/) {
	    next;
	}
	
	if ($file =~ /_Skel\.class$/) {
	    next;
	}
	
	print "Linking " . $file . "\n";
	
	$result = link ("<#CLASSDIR#>/arlut/csd/ganymede/".$file, $file);
	
	if (!$result){
	    print "$! -- $file\n";
	}
    }
}

# Now we need to link in any stub classes

print "\nAttempting to link stubs\n\n";

opendir SOURCEDIR, "<#CLASSDIR#>/arlut/csd/ganymede" or die "couldn't open dir for stubs";
@stubs = grep /_Stub/, readdir SOURCEDIR;
closedir SOURCEDIR;

foreach $file (@stubs) {
  print "Linking " . $file . "\n";
  $result = link ("<#CLASSDIR#>/arlut/csd/ganymede/".$file, $file);

  if (!$result){
    print "$! -- $file\n";
  }
}

print "\nAttaching client dir\n\n";

$clientdir="<#CLASSDIR#>/client_classes/arlut/csd/ganymede/client";
$sourcedir="<#CLASSDIR#>/arlut/csd/ganymede/client";

if (! -e $clientdir) {
   mkdir($clientdir, 0770) or die "Couldn't build new client directory";
}
chmod(0770, $clientdir);

chdir($clientdir) or die "Couldn't go in client directory";

opendir SOURCEDIR, $sourcedir or die "Couldn't scan client directory";
#@files = grep -f, map "$sourcedir/$_", readdir SOURCEDIR;
@files = readdir SOURCEDIR;
closedir SOURCEDIR;

foreach $file (@files) {
  if (!-f "$sourcedir/$file") {
    next;
  }

  print "Linking " . $file . "\n";
  
  $result = link ("$sourcedir/$file", $file);

  if (!$result){
    print "$! -- $file\n";
  }
}

print "\nDone sync'ing client_classes tree.\n\n";
