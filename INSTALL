
   Ganymede
   
Ganymede UNIX Installation Guide Release 1.0 prerelease 1, beta 4 - 10 October
                                     2000
                                       
     _________________________________________________________________
                                      
   Installing Ganymede breaks down into five steps:
   
    1. Configuring the distribution for your site
    2. Installing server files
    3. Installing UNIX client files
    4. Prepare web access clients
    5. Configuring the server
    6. Loading the server
       
   Each of these topics is discussed in its own section below.
   
_1. Configuring the distribution for your site_

   When you first unpack the Ganymede UNIX distribution, you will see
   that there is a configure script under the ganymede-xx directory. This
   script does two main things. First, it unpacks four scripts you can
   immediately use to install the client and server, called
   installClient, installWeb and installServer. Second, configure goes
   through the source tree and builds and configures the makefiles and
   build scripts used to build the source.
   
   Run configure to get these install scripts built and to get the source
   tree configured for building.
   
   See README.source for information on building the source tree. Note
   that as downloaded, everything is already compiled, and bundled into
   the jar files in the jars directory. You should only need to worry
   about recompiling things if you make changes.
   
_2. Installing server files_

   The server files should be in a location that is not accessible to the
   average user. On UNIX, you'll probably want to be running the Ganymede
   server as _root_ so that Ganymede can properly build NIS maps and DNS
   tables. There is nothing intrinsic to the Ganymede server that
   requires root privileges, but the build scripts that you install to
   propagate network information may need to be installed as root.
   
   The Ganymede server consists primarily of:
   
     * a jar file that contains the Ganymede server code (
       ganymedeServer.jar)
     * a jar file that contains custom plug-in code, custom.jar
     * a ganymede.properties file that sets configuration parameters
     * a ganymede.db file
     * a script, runServer, that invokes java on
       _arlut.csd.ganymede.Ganymede_ to run the server
     * a script, stopServer, that can be used to cleanly shut the server
       down.
       
   While running, the server will also produce:
   
     * a running journal file that records all transactions made by the
       server so that the server can fully recover if it ever crashes or
       if the system running it goes down
     * a comprehensive log file, log
     * NIS and/or DNS source files, depending on the schema configuration
       <optional>
     * a schematic listing of the database definition <optional>
       
   Of these, ganymede.db, ganymede.properties, journal, log, and the NIS
   and DNS source files are sensitive. The ganymede.db file is not
   difficult to analyze, and passwords may be stored in plaintext
   therein, depending on your database configuration. As shipped with the
   current release, the five sample database configurations do not store
   plaintext passwords. The ganymede.properties file must be protected,
   as it has the the root (supergash) password chosen at install time in
   plaintext. If desired, the ganymede.properties file can be edited to
   remove the ganymede.defaultrootpass entry.
   
   With those notes out of the way, run installServer to install the
   server. installServer will ask you a number of questions, including
   the following:
   
     * Where are the jdk binaries located?
     * Where should the server's directory be installed?
     * What is the name of the system that the server will run on?
     * What port should the RMI registry supporting Ganymede run on?
     * What mailhost should Ganymede use to send out diagnostic mail?
     * What email address should Ganymede sign on email that it sends
       out?
     * What name do you want the Ganymede superuser account to have?
     * What password do you want the superuser account to have?
     * What name do you want the Ganymede monitor account to have?
     * What password do you want the monitor account to have?
     * What schema do you want to initialize the database with?
       (gash,nisonly,bsd,linux,gasharl)
       
   Depending on the schema chosen, if any, additional questions may be
   asked.
   
   When you have answered all questions, installServer will customize and
   install the server and all its files specified server directory. A
   file named README.custom will be created in the server directory with
   detailed instructions on how to load data into the Ganymede system
   using the schema you have chosen, if any.
   
   At the present time, the following schema kits are available as
   options when you run installServer:
   
   gash
          A complex schema based on the GASH system, the gash schema is
          designed to work with data files from GASH, to manage
          ARL-formatted sources files for the NIS passwd, group,
          netgroup, aliases, auto.vol, and auto.home.* maps, as well as
          the ARL-custom hosts_info system information database, used for
          DNS management.
          
          The gash schema kit has not been maintained recently, in favor
          of the gasharl schema kit, which is more customized for ARL's
          use. Proper use of the gash schema kit requires a set of custom
          scripts that take the GASH datafiles and propagate them into
          NIS and DNS. These files are included in the Ganymede
          distribution, but they are not documented or supported. We are
          working on some new integration scripts that will be much
          better documented and included with the Ganymede distribution
          by time of 1.0.
          
   nisonly
          A simple schema to manage UNIX passwd and group files, using
          Solaris-formatted gecos fields in the passwd file.
          
   bsd
          A simple schema for managing users and groups under BSD 4.4
          derived operating systems, with support for the BSD
          master.passwd file. Includes a builder script that you can use
          to allow Ganymede to actively manage your /etc/master.passwd
          and /etc/group files.
          
   linux
          A simple schema for managing users and groups under Linux.
          Includes a builder script that you can use to allow Ganymede to
          actively manage your /etc/passwd and /etc/group files.
          
   gasharl
          Like the gash schema, this schema is designed to manage a
          complex NIS/DNS environment using files defined in the GASH
          system.
          
          Unlike the gash schema, this schema has been under recent
          active development and maintenance, and has some ARL-specific
          features that will not be of much use even to other GASH users,
          including code for the ARL contract database.
          
          This schema kit does have a lot of good custom code that might
          be of interest to people looking to create their own schema
          kits, including a number of wizard examples.
          
   ganymede.only
          An experimental schema done some time ago, ganymede.only
          separates personal information from the user accounts, and does
          not include any useful builder scripts.
          
          The ganymede.only schema has not been touched for many months.
          
   Whichever kind of schema you choose, the installServer script will
   configure the server to run with a ganymede.db and custom.jar file
   built for the chosen schema.
   
   If you don't choose any schema, installServer will install the
   Ganymede server without any ganymede.db file. The first time you run
   the server, a new ganymede.db will be created with nothing defined
   except the basic object and field types needed by the server for basic
   operations. This may be a useful option if you want to create a new
   schema from scratch.
   
   After you have run installServer, installClient, and/or installWeb
   (below), you can immediately run the server and connect with the
   client, but the database will be empty. You will need to see section
   5) below to get data bulk-loaded into Ganymede.
   
_3. Installing UNIX client files_

   There are two primary clients for Ganymede. We will call these the
   end-user client and the admin console. Both can be run from a UNIX
   command line with a shell script that will run java on them, or from a
   web browser with support for the full 1.1 JDK standard. There is
   nothing to stop you from running either client on a Win32 box, but you
   will have to develop .bat files to run the code on your own. The
   clients are themselves totally portable, however, as they are simply
   Java jar files.
   
   We have provided an install script for installing the Ganymede clients
   on a UNIX system. installClient will prompt you for the name of the
   machine that will be running your Ganymede server, and the directory
   which will contain the bin, html, and jars directories. The install
   script will then customize and install scripts for you so that the
   end-user client and admin console can easily be run. Of course, that
   the server has to be up and running to run either the main client or
   the console.
   
   Don't try to install the client and server into the same directory..
   the two are meant to be installed separately, in separate directories.
   This is important because the server files need to be kept out of the
   reach of non-privileged users, while the client files are intended to
   be available for anyone to run.
   
_4. Prepare web access clients_

   The installWeb script is used to install the files necessary for
   serving on a web server to support client access to Ganymede from a
   web browser with a modern Java runtime. installWeb installs a bunch of
   files into a designated directory, including an index.html file, the
   ganymede.jar and ganymedeAdmin.jar, and a bunch of individual html
   files linked to the index.html file, all customized for your Ganymede
   server's location.
   
   Java applets run in a security "sandbox", which keeps downloaded code
   from being able to cause mischief on your machine. One of the
   restrictions of the Java sandbox is that unsigned downloaded applets
   are only allowed to open networking connections to the same machine
   that the applet was downloaded from. Because of this, you will have to
   install a web server on the same machine as your Ganymede server, and
   your users will have to point their browser at a URL on that system
   which will resolve to the directory that contains the files installed
   by the installWeb script.
   
   Once you have a web server running on the same machine as your
   Ganymede server and you have used installWeb to generate the web
   directory for your clients, you will need to be sure that the machines
   that will run the client over the web are configured properly. The
   installed web files include versions of the Ganymede client pages
   designed for use with the Java plug-in on Windows (version 1.3.0 or
   better is really best.. see java.sun.com/j2se/1.2/jre/ to download the
   Java plug-in), as well as a version of the client pages designed for
   use with a browser with built-in RMI and Swing support. The 'native'
   option is intended for users of web browsers that have built-in
   support for Sun's latest JVM plug-ins. This includes the Netscape
   browser under OS/2, the Internet Explorer browser on Macintosh, and
   the Mozilla/Netscape 6 browser on Macintosh, Windows, Linux, and
   Solaris.
   
   On the Macintosh with Internet Explorer, you need to install the very
   latest version of Apple's Macintosh Runtime for Java. Current version
   of the MRJ for traditional MacOS are based on Java 1.1, and do not
   include the Swing class libraries required by the Ganymede clients. In
   order to make Ganymede work on such systems, you will need to extract
   the swingall.jar file from Sun's JDK and install it on your Macintosh
   in a directory of your choosing. Internet Explorer has a preferences
   option to add additional class paths to your browser's Java
   environment. Find and add the swingall.jar file to your Internet
   Explorer Java class list and you should be ready to go, using the
   native mode client.
   
   Windows users using Netscape 4.x or any version of Internet Explorer,
   will need to use the plug-in mode client. If your users do not install
   the Java plug-in before trying to run the Plug-In clients, their web
   browser will help them download the Plug-In as needed. Once the Java
   Plug-In is downloaded, the user will need to quit out of the browser
   and run the Plug-In control panel. Configure the Plug-In so that the
   network and class access is unrestricted and unsigned applets are
   allowed. Apply the preference changes, and restart the browser. The
   Ganymede Plug-In clients should work properly now.
   
   _IMPORTANT NOTE_: whenever you run applets using the Java Plug-In, the
   applets can only run as long as the log-in applet is still displayed
   in the web browser. If you close the main browser window or click to a
   different page (either by following a link or by clicking back on the
   browser), the applet will be shut down. Both the Ganymede client and
   admin console have been written so that this shut-down is handled in
   an orderly fashion, but the shut-down is unavoidable, so be sure not
   to disturb the applet frame while you are using the client or console.
   
   In addition to the Ganymede client and admin console, installWeb will
   also install a simple password-change utility/applet. This program
   hasn't been maintained in a while, and may not be working properly
   currently.
   
_5. Configuring the server_

   The server may be configured in two ways. The first is by using the
   admin console to edit the server's schema and the second is by
   authoring and/or modifying plug-in classes.
   
   The server schema is specified in the ganymede.db file, and includes
   definitions of the object types to be stored in the database, their
   fields, and any plug-in classes that are to manage particular object
   types. We will occasionally talk about a 'schema file'. A schema file
   is simply a ganymede.db file that just contains the data definition
   specification, but no custom objects. Each of the sample schemas
   included with Ganymede include a ganymede.schema file that you can use
   in your evaluation of Ganymede.
   
   The plug-in classes themselves are typically packaged in a file named
   custom.jar. As with the ganymede.schema files, both the gash and
   nisonly schema directories contain a custom.jar file.
   
   Ganymede schema/db files and custom class sets (custom.jar) need to be
   matched together. Whenever you run the server, you will want to
   specify both a ganymede.db file and a custom.jar file. You can run the
   Ganymede server with no ganymede.db or custom.jar files, and the
   Ganymede server will initialize a simple ganymede.db file for you.
   
   If you chose one of the sample schemas when you ran installServer, you
   should have a ganymede.db and a custom.jar file in place. You should
   be able to start the server and have it come up with the object types
   and custom code from whichever of the schemas you chose. If you did
   not choose a schema, but rather just hit return when prompted, the
   Ganymede server will create you a bare-bones ganymede.db file when you
   run the server for the first time. See src/schemas/README for a
   description of the various schema kits.
   
   In order to edit the server's schema, start the Ganymede server on
   your server machine. The server will load its database, come up, and
   tell you that it is ready to operate. You can now run the adminConsole
   from your client install. Log in using the root name and password you
   specified when you ran installServer. After a moment, you'll see the
   admin console come up. Go to the control menu and select 'Edit
   Schema'. After a bit, you'll see the schema editor come up. You can
   add, remove, or modify object definitions. Each object definition has
   a 'Classname' field. You can enter the name of a class in this field,
   and the next time that the Ganymede server is restarted, Ganymede will
   load that class and use it to manage the object type that you
   associated it with.
   
   When you have made all the changes to the schema that you want, hit OK
   and the Ganymede server will integrate the changes you made. You
   should then use the Admin console to tell the server to dump the
   database. If you are going to be loading the database from scratch
   using the database definition you just created, you should also tell
   the admin console to have the server dump the schema. This will cause
   the server to emit a schema file (empty db file) according to the
   ganymede.properties file that the server was started with. You can
   then take this schema file and copy it for use with the loader code,
   as discussed in section 5.
   
   The sample schemas each specify a builder task to be run when a
   transaction is committed.
   
   gasharl
          arlut.csd.ganymede.custom.GASHBuilderTask
          
   linux
          arlut.csd.ganymede.custom.LinuxBuilderTask
          
   bsd
          arlut.csd.ganymede.custom.BSDBuilderTask
          
   nisonly
          arlut.csd.ganymede.custom.NISBuilderTask
          
   gash
          arlut.csd.ganymede.custom.GASHBuilderTask
          
   ganymede.only
          arlut.csd.ganymede.custom.DNSBuilderTask and
          arlut.csd.ganymede.custom.NISBuilderTask
          
   In addition, each schema by default will look for a script to run in
   the <installdir>/db directory. If you like, you can edit the server's
   properties file to change ganymede.builder.scriptlocation, which
   specifies where the build scripts are to be found.
   
   gasharl
          gashbuilder
          
   bsd
          bsd_builder
          
   linux
          linux_builder
          
   nisonly
          nisbuilder
          
   gash
          gashbuilder
          
   ganymede.only
          nisbuilder,dnsbuilder (not maintained currently)
          
   These scripts should be executable by the user under which the
   Ganymede server is run. The appropriate script will be run after the
   corresponding builder task has emitted fresh copies of the data files
   to <installdir>/db/out. The scripts are intended to do an NIS/DNS
   push, or to copy passwd and group files to /etc, depending on the
   schema, and how you wish to use them.
   
   No matter which schema you choose, the class file for the builder task
   is bundled as part of the schema's custom.jar file, and you can view
   and alter the source code in schema/custom_src.
   
_6. Loading the server_

   When you run the installServer script, you are prompted for which
   sample schema you want to use. Whichever you choose is copied to your
   server install directory under '_schema_', and a file providing
   customized and detailed instructions is placed in the README.custom
   file in the server install directory.
   
   The _schema_ directory contains the sample schema file as discussed
   above, a _custom_src_ directory with the source code for the custom
   plug-ins to go with the object definitions in the ganymede.schema
   file, and a _loader_ directory.
   
   The _loader_ directory contains the following:
   
     * a ganymede.properties file that you will want to customize
     * an _input_ directory
     * a _db_ directory
     * a runDirectLoader script
       
   In order to load the Ganymede server, copy your input files to the
   _input_ directory, and run the runDirectLoader script. This will
   produce a _loader.db_ file in the _schema/loader/db_ directory. You
   can then copy this file to db/ganymede.db, remove any journal file in
   _db_, and start the server. The server will load the new database, and
   you will then be able to log in as supergash and take a look at your
   database.
   
   With the Ganymede 1.0 pre-release series, there is now a new xmlclient
   client, which can be used instead of the old-style runDirectLoader
   script to load data into the Ganymede server. xmlclient is a
   completely generic data loader, and you can write Perl scripts to load
   your data into Ganymede, according to whatever schema definition you
   are using. See xml.html for details. At the present time, the Ganymede
   schema kits have not been adapted to use the xmlclient script for data
   loading. This is one of the primary remaining goals for Ganymede 1.0
   development.
   
   Take a look at the README file in the schema directory for details on
   how the schema you installed works.
   
     _________________________________________________________________
                                      
   
    Jonathan Abbey
    
   Last modified: Mon Oct 9 23:54:54 CDT 2000
