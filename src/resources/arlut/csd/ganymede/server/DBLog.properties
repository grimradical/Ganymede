# DBLog.properties
#
# A default localization file for the Ganymede server
#
# Note: All single quotes must be doubled for escaping.. so "can't" becomes "can''t".
#
# Created: 27 April 2005
#
# Last Revision Changed: $Rev$
# Last Changed By: $Author$
# Last Mod Date: $Date$
# SVN URL: $HeadURL$

#
# global
#

global.log_closed = log already closed.

#
# mailnotify
#

mailNotify.no_mail = DBLog.mailNotify(): Skipping mailout event ({0}) due to mail being disabled at startup.
mailNotify.unrecognized_token = Error in DBLog.mailNotify(): unrecognized eventClassToken: {0}.
mailNotify.whaaa = Logic error in DBLog.mailNotify(): eventClassToken not configured for mail delivery: {0}.
mailNotify.mailer_error = DBLog.mailNotify(): mailer error:\n{0}\n\nwhile processing: {1}

#
# startTransactionLog
#

startTransactionLog.start_template = Start Transaction: {0}

#
# streamEvent
#

streamEvent.no_transaction = Not in a transaction.
streamEvent.mailer_error = DBLog.streamEvent(): mailer error:\n{0}\n\nwhile processing: {1}
streamEvent.comment_template = {0}\n----\nAbout this transaction:\n{1}\n----\n{2}
streamEvent.no_comment_template = {0}\n{1}

#
# endTransactionLog
#

endTransactionLog.finish_template = Finish Transaction: {0}

# we don't want any \n's between wordwrap and signature in the
# summary_template below, since appendMailOut() adds "\n\n" at the end
# of each transaction summary segment
#
# Field 0 is the user's identifier (may include persona suffix), 1 is the date,
# 2 is the main body, and three is the signature. The body always ends
# with \n\n, so there's no need to put a newline between 2 and 3.

endTransactionLog.summary_template = Transaction summary: User {0} {1,date,EEE MMM dd HH:mm:ss zzz yyyy}\n\n{2}{3}
endTransactionLog.summary_comment_template = Transaction summary: User {0} {1,date,EEE MMM dd HH:mm:ss zzz yyyy}\n\n----\nAbout this transaction:\n{2}\n----\n{3}{4}
endTransactionLog.mailer_error = DBLog.endTransactionLog(): mailer error:\n{0}\n\nwhile processing: {1}

#
# sendSysEventMail
#

sendSysEventMail.mailer_error = DBLog.sendSysEventMail(): mailer error:\n{0}\n\nwhile processing: {1}

#
# sendObjectMail
#

# this template is used to create the body of email messages
# summarizing operations on objects.
#
# Field 0 is the type of object, 1 is the admin name, 2 is the date,
# 3 is the main body, 4 is the signature.  The body always ends
# with \n\n, so there's no need to put a newline between 3 and 4. 

sendObjectMail.template = {0} summary: User {1} {2,date,EEE MMM dd HH:mm:ss zzz yyyy}\n\n{3}{4}
sendObjectMail.comment_template = {0} summary: User {1} {2,date,EEE MMM dd HH:mm:ss zzz yyyy}\n\n----\nAbout this transaction:\n{3}\n----\n{4}{5}

# this template is used to provide the subject for email summarizing
# multiple instances of a given operation in a single transaction,
# when the recipient has asked to be notified of operations of that
# type.
#
# an example would be when an admin deletes 5 users in one go.  A person
# who has configured an ObjectEvent entry in Ganymede to send him email
# whenever a user is deleted would receive a single email whose subject
# would look like
#
# Ganymede: User Deleted (x5)
#
# where "Ganymede: " is {0}, "User Deleted" is {1} (it comes from the
# descriptive title the user put when configuring the ObjectEvent
# object), and 5 is {2}.

sendObjectMail.multi_object_subject = {0}{1} (x{2,number,#})
sendObjectMail.mailer_error = DBLog.sendObjectMail(): mailer error:\n{0}\n\nwhile processing: {1}
