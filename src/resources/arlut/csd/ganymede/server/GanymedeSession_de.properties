# GanymedeSessions.properties
#
# A default localization file for the Ganymede server
#
# Note: All single quotes must be doubled for escaping.. so "can't" becomes "can''t".
#
# Created: 21 May 2004
#
# Last Revision Changed: $Rev: 7417 $
# Last Changed By: $Author: broccol $
# Last Mod Date: $Date: 2006-10-10 16:47:54 +0200 (Tue, 10 Oct 2006) $
# SVN URL: $HeadURL: http://tools.arlut.utexas.edu/svn/ganymede/trunk/ganymede/src/resources/arlut/csd/ganymede/server/GanymedeSession.properties $

#
# global
#

#global.permissions_error = Permissions Error
global.permissions_error = Berechtigungsfehler
#global.no_such_object_type = Error, "{0}" is not a valid object type in this Ganymede server.
global.no_such_object_type = Fehler: "{0}" ist für diesen Ganymede-Server kein gültiger Objekt-Typ.

#
# constructors
#

#init.no_semaphore = Couldn''t create {0} GanymedeSession.. semaphore disabled: {1}
init.no_semaphore = Kann GanymedeSession {0} nicht aufbauen. Semaphore gesperrt: {1}
#init.semaphore_error = semaphore error: {0}
init.semaphore_error = Semaphor-Fehler: {0}

# init.loggedin is used in the Ganymede admin console to show a user''s status

#init.loggedin = logged in
init.loggedin = Angemeldet

#
# checkIn()
#

#checkIn.exception = Ganymede session for {0} has a checkIn() cause objectsCheckedOut to go negative
checkIn.exception = Die GanymedeSession von {0} hat ein checkIn(), das objectsCheckedOut negativ werden lässt

#
# timeCheck()
#

#timeCheck.sending = Sending a timeout message to {0}
timeCheck.sending = Schicke {0} eine Zeit überschritten-Meldung
#timeCheck.forceOffNoObjs = You have been idle for over {0,number,#} minutes with no transactions in progress.  You are being disconnected as a security precaution.
timeCheck.forceOffNoObjs = Sie waren für mehr als {0,number,#} Minuten untätig. Sie werden aus Sicherheitgründen vom Server abgemeldet.
#timeCheck.forceOffWithObjs = You have been idle for over {0,number,#} minutes.  You are being disconnected as a security precaution.
timeCheck.forceOffWithObjs = Sie waren für mehr als {0,number,#} Minuten untätig. Sie werden aus Sicherheitsgründen abgemeldet.
#timeCheck.caught_throwable = Throwable condition caught while trying to send a timeout message to {0}:\n\n{1}
timeCheck.caught_throwable = Beim Versuch, eine Zeit überschritten-Meldung an {0} zu schicken, ist eine Exception aufgetreten:\n\n{1}

#
# forceOff()
#

#forceOff.log_event = Abnormal termination for username: {0}\n\n{1}
forceOff.log_event = Unüblicher Abbruch für Benutzer {0}\n\n{1}
#forceOff.forcing = Forcing {0} off for {1}.
forceOff.forcing = Melde {0} wegen {1} zwangsweise ab.

#
# sendMessage()
#

#sendMessage.exception = type out of range
sendMessage.exception = Wertebereich für Typ überschritten

#
# unreferenced()
#

#unreferenced.reason = Network connection to the Ganymede client process has been lost.
unreferenced.reason = Die Netzwerkverbindung zum Client ging verloren.

#
# logout()
#

#logout.normal_event = OK logout for username: {0}
logout.normal_event = Abmeldung für Benutzer {0} abgeschlossen
#logout.logged_off = {0} logged off
logout.logged_off = {0} abgemeldet

#
# selectPersona()
#

#selectPersona.attempting_timecheck = User {0} attempting to re-authenticate non-privileged login after being timed out.
selectPersona.attempting_timecheck = Benutzer {0} versucht, sich nach Zeitüberschreitung an einem unprivilegierten Konto wieder anzumelden.
#selectPersona.failed_timecheck = User {0} failed to re-authenticate a login that timed out.
selectPersona.failed_timecheck = Benutzer {0} konnte sich nach Zeitüberschreitung nicht wieder anmelden.
#selectPersona.giving_up = User {0}''s privileged login as {1} timed out.  Downshifting to non-privileged access.
selectPersona.giving_up = Der Benutzer {0}, angemeldet als {1}, hat eine Zeitüberschreitung.  Er wird zu unprivilegiertem Zugriff zurückgestuft.
#selectPersona.no_persona = Couldn''t find persona {0} for user: {1}
selectPersona.no_persona = Kann Rolle {0} für Benutzer {1} nicht finden
#selectPersona.switched = User {0} switched to persona {1}.
selectPersona.switched = Benutzer {0} wechselte zu Rolle {1}.

#
# setDefaultOwner()
#

#setDefaultOwner.error_title = Error in setDefaultOwner()
setDefaultOwner.error_title = Fehler in setDefaultOwner()
#setDefaultOwner.error_text = Error.. ownerInvids contains an invalid invid
setDefaultOwner.error_text = Fehler: ownerInvids enthält ein ungültiges Invid

# the following message is re-used under filterQueries()

#setDefaultOwner.error_text2 = Error.. ownerInvids contains invid that the persona is not a member of.
setDefaultOwner.error_text2 = Fehler: ownerInvids enthält Invid, in dem die Rolle kein Mitglied ist.

#
# filterQueries()
#

#filterQueries.error = Server: Error in filterQueries()
filterQueries.error = Server: Fehler in filterQueries()

#
# openTransaction()
#

#openTransaction.error = Server: Error in openTransaction()
openTransaction.error = Server: Fehler in openTransaction()
#openTransaction.error_text = Error.. transaction already opened
openTransaction.error_text = Fehler: Transaktion ist schon offen

#
# commitTransaction()
#

#commitTransaction.error = Server: Error in commitTransaction()
commitTransaction.error = Server: Fehler in commitTransaction()
#commitTransaction.error_text = Error.. no transaction in progress
commitTransaction.error_text = Fehler: keine Transaktion offen
#commitTransaction.user_committed = User {0} committed transaction.
commitTransaction.user_committed = Benutzer {0} hat die Transaktion abgeschlossen

#
# abortTransaction()
#

#abortTransaction.exception = no transaction in progress
abortTransaction.exception = keine Transaktion offen
#abortTransaction.user_aborted = User {0} cancelled transaction.
abortTransaction.user_aborted = Benutzer {0}  hat die Transaktion abgebrochen. 
#
# sendMail()
#

# the following message is re-used under sendHTMLMail

#sendMail.signature = This message was sent by {0}, who is running the Ganymede client on {1}.
sendMail.signature = Diese Mitteilung wurde von {0} geschickt. Er(Sie) ist angemeldet auf {1}.

#
# reportClientBug
#

#reportClientBug.logPattern = \nCLIENT ERROR DETECTED:\nuser == "{0}"\nhost == "{1}"\nclient id string == "{2}"\nexception trace == "{3}"\n
reportClientBug.logPattern = \nCLIENT FEHLER GEFUNDEN:\nBenutzer == "{0}"\nRechner == "{1}"\nClient Id == "{2}"\nexception trace == "{3}"\n

#
# reportClientVersion
#

#reportClientVersion.logPattern = \nClient Version Report:\nuser == "{0}"\nhost == "{1}"\nclient id string == "{2}"\n
reportClientVersion.logPattern = \nClient Version:\nBenutzer == "{0}"\nRechner == "{1}"\nClient Id == "{2}"\n


#
# queryDispatch()
#

#queryDispatch.null_query = null query
queryDispatch.null_query = Leere Abfrage
#queryDispatch.lock_exception = error, didn''t have all bases needed for query locked with extantLock
queryDispatch.lock_exception = Fehler: Für die Abfrage stehen nicht alle Objekt-Basen (gesperrt mit extantLock) zur Verfügung.
#queryDispatch.logged_out_exception = Error, couldn''t complete query processing..\nGanymedeSession logged out during processing
queryDispatch.logged_out_exception = Fehler: Abfrage konnte nicht abgeschlossen werden.\nGanymedeSession wurde währenddessen beendet
#queryDispatch.read_lock_exception = Error, couldn''t complete query processing..\nRead lock released during processing
queryDispatch.read_lock_exception = Fehler: Abfrage konnte nicht abgeschlossen werden..\nLesesperre wurde währenddessen aufgehoben

#
# viewObjectHistory()
#

#viewObjectHistory.null_invid = Null invid passed into viewObjectHistory
viewObjectHistory.null_invid = Null invid wurde an viewObjectHistory übergeben
#viewObjectHistory.null_pointer = Can''t return history for an object that has been deleted or does not exist ({0})
viewObjectHistory.null_pointer = Kann keine Historie für ein Objekt liefern, das gelöscht wurde oder nicht existiert ({0})

# the next two messages are also used in viewAdminHistory()

#viewObjectHistory.permissions = Permissions denied to view the history for this invid.
viewObjectHistory.permissions = Keine Berechtigung zum Ansehen der Historie für dieses Invid.
#viewObjectHistory.no_log = Log not active, can''t view invid history
viewObjectHistory.no_log = Protokollierung nicht aktiv. Ansehen der Invid-Historie nicht möglich

#
# viewAdminHistory()
#

#viewAdminHistory.null_invid = Null invid passed into viewAdminHistory
viewAdminHistory.null_invid = Null invid wurde an viewAdminHistory übergeben
#viewAdminHistory.wrong_invid = Wrong type of invid passed into viewAdminHistory
viewAdminHistory.wrong_invid = Falscher Invid-Typ wurde an viewAdminHistory übergeben
#viewAdminHistory.null_pointer = argh!! null object in viewAdminHistory on invid {0}
viewAdminHistory.null_pointer = Null Objekt in viewAdminHistory für Invid {0}

#
# view_db_object()
#

#view_db_object.no_object_error = Object Not Found
view_db_object.no_object_error = Objekt nicht gefunden
#view_db_object.no_object_error_text = Could not find object {0} in the database.  Perhaps the object does not exist?
view_db_object.no_object_error_text = Objekt {0} konnte in der DB nicht gefunden werden. 
#view_db_object.permissions_error_text = Permission to view object [{0} - {1}] denied.
view_db_object.permissions_error_text = Keine Berechtigung zum Anzeigen von Objekt [{0} - {1}].

#
# edit_db_object()
#

#edit_db_object.no_object_error_text = Error, object [{0}] does not appear to exist.  Couldn''t edit it.
edit_db_object.no_object_error_text = Fehler: Objekt [{0}] scheint nicht zu existieren.
#edit_db_object.already_editing = Error, object already being edited
edit_db_object.already_editing = Fehler: Objekt wird bereits bearbeitet
#edit_db_object.already_editing_text = {0} [{1} - {2}] is already being edited by user {3} on host {4}
edit_db_object.already_editing_text = {0} [{1} - {2}] wird bereits von Benutzer {3} auf Rechner {4} bearbeitet
#edit_db_object.checking_out_error = Error checking object out for editing
edit_db_object.checking_out_error = Fehler beim Auschecken von Objekt zur Bearbeitung
#edit_db_object.checking_out_error_text = Error checking out {0} [{1} - {2}] for editing.\nPerhaps someone else was editing it?
edit_db_object.checking_out_error_text = Fehler beim Auschecken von {0} [{1} - {2}] zur Bearbeitung.\nVielleicht wird es schon bearbeitet?
#edit_db_object.permissions_error_text = Permission to edit {0} [{1} - {2}] denied.
edit_db_object.permissions_error_text = Keine Berechtigung zum Bearbeiten von {0} [{1} - {2}].
#edit_db_object.custom_class_load_error_text = Error loading custom class for this object.
edit_db_object.custom_class_load_error_text = Fehler beim Laden der Custom-Klasse für dieses Objekt.

#
# create_db_object()
#

#create_db_object.cant_create = Can''t Create Object
create_db_object.cant_create = Kann Objekt nicht erzeugen
#create_db_object.invalid_type = Permission to create object of *invalid* type {0} denied.
create_db_object.invalid_type = Keine Berechtigung zum Erzeugen eines Objekt vom Typ *invalid* {0}.
#create_db_object.type_no_perm = Permission to create object of type {0} denied.
create_db_object.type_no_perm = Keine Berechtigung zum Erzeugen eines Objekt vom Typ {0}.
#create_db_object.operation_refused = Can''t create new object, the operation was refused
create_db_object.operation_refused = Kann neues Objekt nicht erzeugen. Die Aktion wurde zurückgewiesen
#create_db_object.no_owner_group = Can''t create new object, no owner group to put it in.
create_db_object.no_owner_group = Kann neues Objekt nicht erzeugen. Keine Besitzergruppe zum Hinzufügen.
#create_db_object.random = Warning, picked an Owner Group at random
create_db_object.random = Warnung. Besitzergruppe zufällig ausgewählt
#create_db_object.random_text = Warning: randomly selected owner group {1} to place new {0} in.
create_db_object.random_text = Warnung: Besitzergruppe {1} für {0} zufällig ausgewählt.
#create_db_object.custom_class_load_error_text = Error loading custom class for this object.
create_db_object.custom_class_load_error_text = Fehler beim Laden der Custom-Klasse für dieses Objekt.

#
# clone_db_object()
#

#clone_db_object.clone_error = Client error
clone_db_object.clone_error = Client-Fehler
#clone_db_object.clone_error_text = Error, the client attempted to clone a null invid.
clone_db_object.clone_error_text = Fehler: Der Client hat versucht, ein Null-Invid zu klonen.
#clone_db_object.denied = Cloning DENIED
clone_db_object.denied = Klonen verboten
#clone_db_object.denied_msg = Cloning operation refused for {0} object {1}.
clone_db_object.denied_msg = Klonen von Objekt {1} wurde für {0} abgelehnt.

#
# inactivate_db_object()
#

#inactivate_db_object.error = Server: Error in inactivate_db_object()
inactivate_db_object.error = Server: Fehler in inactivate_db_object()
#inactivate_db_object.error_text = Can''t inactivate a non-existent object
inactivate_db_object.error_text = Kann nicht-existierendes Objekt nicht inaktivieren
#inactivate_db_object.already_inactivated = Server: Can''t inactivate an inactive object
inactivate_db_object.already_inactivated = Server: Kann inaktives Objekt nicht inaktivieren
#inactivate_db_object.already_inactivated_text = Error.. can''t inactivate {0} {1}, object is already inactivated
inactivate_db_object.already_inactivated_text = Fehler: {0} {1} kann nicht inaktiviert werden, ist bereits inaktiv
#inactivate_db_object.permission_text = Don''t have permission to inactivate {0} {1}
inactivate_db_object.permission_text = Sie haben keine Berechtigung, {0} zu inaktivieren {1}
#inactivate_db_object.no_checkout = Couldn''t check out {0} {1} for inactivation
inactivate_db_object.no_checkout = Kann {0} {1} nicht zum Inaktivieren auschecken
#inactivate_db_object.not_inactivatable = Object {0} is not of a type that may be inactivated
inactivate_db_object.not_inactivatable = Objekt {0} ist von keinem Typ, der inaktiviert werden kann

#
# reactivate_db_object()
#

#reactivate_db_object.error = Server: Error in reactivate_db_object()
reactivate_db_object.error = Server: Fehler in reactivate_db_object()
#reactivate_db_object.no_such = Can''t reactivate a non-existent object
reactivate_db_object.no_such = Kann nicht-existierendes Objekt nicht reaktivieren
#reactivate_db_object.not_inactivated = Error, can''t reactivate {0} {1}, object is not inactivated
reactivate_db_object.not_inactivated = Fehler: Kann {0} {1} nicht reaktivieren, Objekt ist nicht inaktiv
#reactivate_db_object.permission_text = You do not have permission to reactivate {0} {1}
reactivate_db_object.permission_text = Sie haben keine Berechtigung {0} {1} zu reaktivieren
#reactivate_db_object.no_checkout = Couldn''t check out {0} {1} for reactivation
reactivate_db_object.no_checkout = Kann {0} {1} nicht für Reaktivierung auschecken

#
# remove_db_object()
#

#remove_db_object.error = Server: Error in remove_db_object()
remove_db_object.error = Server: Fehler in remove_db_object()
#remove_db_object.badobj1 = Error.. can''t delete the default permissions definitions.  This object is critical to the proper functioning of the Ganymede server.
remove_db_object.badobj1 = Fehler: Kann Default-Berechtigungen nicht löschen. Dieses Objekt ist für das Funktionieren des Ganymede-Servers unerlässlich.
#remove_db_object.badobj2 = Error.. can''t delete the {0} persona.  This object is critical to the proper functioning of the Ganymede server.
remove_db_object.badobj2 = Fehler: Kann Rolle {0} nicht löschen. Dieses Objekt ist für das Funktionieren des Ganymede-Servers unerlässlich.
#remove_db_object.badobj3 = Error.. can''t delete the supergash owner group.  This object is critical to the proper functioning of the Ganymede server.
remove_db_object.badobj3 = Fehler: Kann die Supergash-Besitzergruppe nicht löschen. Dieses Objekt ist für das Funktionieren des Ganymede-Servers unerlässlich.
#remove_db_object.no_such = Can''t delete a non-existent object
remove_db_object.no_such = Kann nicht-existierendes Objekt nicht löschen
#remove_db_object.permission_text = You do not have permission to delete {0} {1}
remove_db_object.permission_text = Sie haben keine Berechtigung zum Löschen von {0} {1}
#remove_db_object.must_inactivate = You do not have permission to delete {0} {1}.\n\nOnly supergash-level admins can remove objects of this type, other admins must use inactivate.
remove_db_object.must_inactivate = Sie haben keine Berechtigung zum Löschen von {0} {1}.\n\nNur Adminstratoren der Supergash-Gruppe können Objekte dieses Typs direkt löschen, Alle anderen Administratoren müssen Inaktivieren benutzen.
#remove_db_object.deletion_refused = Permission to delete {0} {1} has been refused by custom code
remove_db_object.deletion_refused = Das Recht zum Löschen von {0} {1} wurde durch den Custom-Code verweigert

#
# runXMLQuery
#

#runXMLQuery.transmitter_error = Error transmitting XML Query
runXMLQuery.transmitter_error = Fehler bei der Übertragung der XML-Abfrage
#runXMLQuery.transmitter_error_msg = Exception caught trying to initialize XML query transmitter\n\n{0}
runXMLQuery.transmitter_error_msg = Beim Initialisieren des XML-Übertragers ist eine Exception aufgetreten\n\n{0}

#
# getXML()
#

#getXML.data_refused = You do not have permissions to dump the server''s data with the xml client
getXML.data_refused = Sie haben keine Berechtigung, die Server-Daten mittels xml-client zu dumpen
#getXML.schema_refused = You do not have permissions to dump the server''s schema definition with the xml client
getXML.schema_refused = Sie haben keine Berechtigung, das Server-Schema mittels xml-client zu dumpen
#getXML.transmitter_error = Error transmitting XML
getXML.transmitter_error = Fehler bei XML-Übertragung
#getXML.transmitter_error_msg = Exception caught trying to initialize server transmitter\n\n{0}
getXML.transmitter_error_msg = Beim Initialisieren des Server-Übertragers ist eine Exception aufgetreten\n\n{0}

#
# getObjects()
#

#getObjects.no_base = Error, getObjects() called on baseid {0}, but that base does not exist.
getObjects.no_base = Fehler: getObjects() wurde mit baseid {0} aufgerufen. Diese Basis existiert nicht.

#
# updatePerms()
#

#updatePerms.no_default_perms = Serious error!  No default permissions object found in database!
updatePerms.no_default_perms = Schwerer Fehler!  In der DB wurde kein Standard-Berechtigungsobjekt gefunden!
#updatePerms.null_selfperm = updatePerms(): Error: PermMatrix field''s value is null in selfperm object
updatePerms.null_selfperm = updatePerms(): Fehler: Der Wert des Feldes PermMatrix im Objekt selfperm ist null

#
# unregisterWizard()
#
#unregisterWizard.exception = tried to unregister a wizard that wasn''t registered
unregisterWizard.exception = Versuch, einen Wizard zu deregistrieren, der nicht registriert war

