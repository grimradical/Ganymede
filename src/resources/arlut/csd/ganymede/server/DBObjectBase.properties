# DBObjectBases.properties
#
# A default localization file for the Ganymede server
#
# Note: All single quotes must be doubled for escaping.. so "can't" becomes "can''t".
#
# Created: 3 September 2004
#
# Last Revision Changed: $Rev$
# Last Changed By: $Author$
# Last Mod Date: $Date$
# SVN URL: $HeadURL$

#
# global
#

global.schema_editing_error = Schema Editing Error
global.notediting = Not in a schema editing context.
global.default_tab = General

#
# receive
#

receive.debug = Loading {0,number,#} {1} objects
receive.basename = DBObjectBase.receive(): loading {0}
receive.rewritingClassname = DBObjectBase.receive(): Rewriting old system class name: {0} as {1}

#
# setXML
#

setXML.baddoc = DBObjectBase.setXML(): root element != open objectdef: {0}
setXML.missingname = DBObjectBase.setXML(): objectdef missing name attribute:\n {0}
setXML.missingid = DBObjectBase.setXML(): objectdef missing id attribute:\n {0}
setXML.noid = Field definition missing name and/or id: {0}
setXML.dupfieldname = More than one field in objectdef: {0}\ncontains field name {1}
setXML.sysfield = Can''t set a field:\n{0}\nwith the same name as a pre-existing built-in field in objectdef:\n{1}
setXML.noglobals = Can''t modify or set a field:\n{0}\nwith a field id in the global field range:\n{1}
setXML.dupfieldid = More than one field in objectdef: {0}\ncontains field id {1}
setXML.deleting = \t\tDeleting field {0}
setXML.dupclassdef = Objectdef contains more than one classdef element:\n{0}
setXML.duplabel = Objectdef contains more than one label element:\n{0}
setXML.editing = \t\tEditing field {0}
setXML.unrecognized = Unrecognized XML item: {0} in objectdef:\n{1}
setXML.mysteryfield = Couldn''t find field {0} while resorting customFields.
setXML.inconsistent = Consistency error while resorting customFields in base {0}
setXML.consistencyerror = Consistency error while resorting customFields.

setXML.debugroot = Setting XML for object Base..{0}
setXML.debugid = Setting id
setXML.debugscanning = Scanning fields
setXML.debugdels = Calculating fields to delete
setXML.debugnew = Setting XML on new field {0}
setXML.debuglabel = Setting label field
setXML.debugclass = Setting class name
setXML.debugname = Setting object name
setXML.debugsorting = Sorting fields
setXML.debugdone = Done processing object base {0}

#
# createHook
#

createHook.noclass = DBObjectBase.createHook(): class definition could not be found: {0}

#
# createNewObject
#

createNewObject.noeditset = null editset in createNewObject
createNewObject.badinvid = bad invid chosen in createNewObject: num already taken
createNewObject.badslottype = bad chosen_slot passed into createNewObject: bad type
createNewObject.badslotnum = bad chosen_slot passed into createNewObject: num already taken
createNewObject.failure1 = createNewObject failure: {0} in trying to construct custom object
createNewObject.failure2 = createNewObject failure: {0} in trying to check out custom object

#
# setName
#

setName.norename = Can''t rename base {0} to {1}, that name is already taken.
setName.invalid_ganymede_name =	"{0}" is not an acceptable Ganymede type name.\n\nAll Ganymede type names must be acceptable XML element names, save that spaces are allowed and underscores are not.

#
# setClassInfo
#

setClassInfo.internalError = Internal RemoteException in setClassInfo: {0}

setClassInfo.noclass = Couldn''t find class {0} in the server''s CLASSPATH.  This probably means that you have not yet rebuilt \
the custom.jar file with this class added.

setClassInfo.noclassoption = Couldn''t load custom management logic from class {0} using class option string ''\
{1}''.\n\nThis may mean that you have not yet rebuilt the custom jar file with the {0} class added, or that \
the resource specified in the option string can not be found by {0}''s factory methods.

#
# moveFieldAfter
#

moveFieldAfter.nomove = Error, can''t move field {0}, no such field in object type.
moveFieldAfter.nofield = Error, can''t move field {0} after {1}, no such field in object type.

#
# moveFieldBefore
#

moveFieldBefore.nomove = Error, can''t move field {0}, no such field in object type.
moveFieldBefore.nofield = Error, can''t move field {0} before {1}, no such field in object type.

#
# setTypeID
#

setTypeID.notypemutation = Can''t change the type_code for an existing object base
setTypeID.typeconflict = Can''t set the type_code for object base {0} to that of an existing object base

#
# setLabelField
#

setLabelField.badfieldname = setLabelField() called with an unrecognized field name.
setLabelField.badfieldid = setLabelField() called with an unrecognized field id.
setLabelField.nonamespace = Error, label fields must be namespace-constrained.

#
# createNewField
#

createNewField.noluck = Couldn''t create field due to initialization error: {0}
createNewField.defaultname = New Field

#
# deleteField
#

deleteField.fieldused = deleteField() called on object type {0} with a field name ({1}) that is in use in the database.
deleteField.fieldunknown = deleteField() called on object type {0} with an unrecognized field name ({1}).
deleteField.sysfield = deleteField() called on object type {0} with a system field name ({1}) that may not be deleted.

#
# fieldInUse
#

fieldInUse.nofield = Can''t check for non-existent field: {0}

#
# getObjectHook
#

getObjectHook.error = Error, couldn''t create hook in getObjectHook().\n{0}

#
# getObject
#

getObject.badtype = Wrong Invid type.

#
# checkSchemaState
#

checkSchemaState.nolabel = Error, object type {0} has no label field defined.
checkSchemaState.notunique = Error, object type {0}''s label field ({1}) is not unique value-constrained.\nYou must set a namespace constraint for this field before committing this schema change.

#
# clearEditor
#

clearEditor.clearing = DBObjectBase.clearEditor(): clearing editor for {0}

#
# updateBaseRefs
#

updateBaseRefs.updating = Updating base reference on {0}

#
# setWriteInProgress
#

setWriteInProgress.doublelock = double write lock in DBObjectBase
setWriteInProgress.doubleunlock = double write unlock in DBObjectBase

#
# addFieldToStart
#

addFieldToStart.sysfield = Error, attempted to add a system field using addFieldToStart().

#
# addFieldAfter
#

addFieldAfter.sysfield = Error, attempted to add a system field using addFieldAfter().
addFieldAfter.noSuchPrevious = Error, couldn''t add field def {0} after field {1}, field {1} was not found in object base.

#
# addFieldToEnd
#

addFieldToEnd.sysfield = Error, attempted to add a system field using addFieldToEnd().

#
# addSystemField
#

addSystemField.nonsysfield = Error, attempted to add a non-system field using addSystemField().
