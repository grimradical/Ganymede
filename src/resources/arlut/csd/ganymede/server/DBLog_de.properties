# DBLog.properties
#
# A default localization file for the Ganymede server
#
# Note: All single quotes must be doubled for escaping.. so "can't" becomes "can''t".
#
# Created: 27 April 2005
#
# Last Revision Changed: $Rev: 6723 $
# Last Changed By: $Author: broccol $
# Last Mod Date: $Date: 2005-04-28 01:34:41 +0200 (Thu, 28 Apr 2005) $
# SVN URL: $HeadURL: http://tools.arlut.utexas.edu/svn/ganymede/trunk/ganymede/src/resources/arlut/csd/ganymede/server/DBLog.properties $

#
# global
#

#global.log_closed = log already closed.
global.log_closed = Protokoll bereits geschlossen.

#
# mailnotify
#

#mailNotify.no_mail = DBLog.mailNotify(): Skipping mailout event ({0}) due to mail being disabled at startup.
mailNotify.no_mail = DBLog.mailNotify(): Mailout-Ereignis ({0}) wird ignoriert. Mail wurde beim Starten ausgeschaltet.
#mailNotify.unrecognized_token = Error in DBLog.mailNotify(): unrecognized eventClassToken: {0}.
mailNotify.unrecognized_token = Fehler in DBLog.mailNotify(): unbekanntes eventClassToken: {0}.
#mailNotify.whaaa = Logic error in DBLog.mailNotify(): eventClassToken not configured for mail delivery: {0}.
mailNotify.whaaa = Logischer Fehler in DBLog.mailNotify(): eventClassToken ist nicht für Mail-Transport konfiguriert: {0}.
#mailNotify.mailer_error = DBLog.mailNotify(): mailer error:\n{0}\n\nwhile processing: {1}
mailNotify.mailer_error = DBLog.mailNotify(): Mailer-Fehler\n{0}\n\nbeim Bearbeiten von {1}

#
# startTransactionLog
#

#startTransactionLog.start_template = Start Transaction: {0}
startTransactionLog.start_template = Starte Transaktion: {0}

#
# streamEvent
#

#streamEvent.no_transaction = Not in a transaction.
streamEvent.no_transaction = Gehört nicht zu einer Transaktion.
#streamEvent.mailer_error = DBLog.streamEvent(): mailer error:\n{0}\n\nwhile processing: {1}
streamEvent.mailer_error = DBLog.streamEvent(): Mailer-Fehler\n{0}\n\nbeim Bearbeiten von {1}

#
# endTransactionLog
#

#endTransactionLog.finish_template = Finish Transaction: {0}
endTransactionLog.finish_template = Beende Transaktion: {0}

# we don't want any \n's between wordwrap and signature in the
# summary_template below, since appendMailOut() adds "\n\n" at the end
# of each transaction summary segment

#endTransactionLog.summary_template = Transaction summary: User {0}:{1}\n\n{2}{3}
endTransactionLog.summary_template = Zusammenfassung der Transaktion: Benutzer {0}:{1}\n\n{2}{3}
#endTransactionLog.mailer_error = DBLog.endTransactionLog(): mailer error:\n{0}\n\nwhile processing: {1}
endTransactionLog.mailer_error = DBLog.endTransactionLog(): Mailer-Fehler\n{0}\n\nbeim Bearbeiten von {1}

#
# sendSysEventMail
#

#sendSysEventMail.mailer_error = DBLog.sendSysEventMail(): mailer error:\n{0}\n\nwhile processing: {1}
sendSysEventMail.mailer_error = DBLog.sendSysEventMail(): Mailer-Fehler\n{0}\n\nbeim Bearbeiten von {1}

#
# sendObjectMail
#

# this template is used to create the body of email messages
# summarizing operations on objects.
#
# Field 0 is the type of object, 1 is the admin name, 2 is the date,
# 3 is the main body, 4 is the signature.  The body always ends
# with \n\n, so there's no need to put a newline between 3 and 4. 

#sendObjectMail.template = {0} summary: User {1}:{2, Date}\n\n{3}{4}
sendObjectMail.template = {0} Zusammenfassung: Benutzer {1}:{2, Date}\n\n{3}{4}

# this template is used to provide the subject for email summarizing
# multiple instances of a given operation in a single transaction,
# when the recipient has asked to be notified of operations of that
# type.
#
# an example would be when an admin deletes 5 users in one go.  A person
# who has configured an ObjectEvent entry in Ganymede to send him email
# whenever a user is deleted would receive a single email whose subject
# would look like
#
# Ganymede: User Deleted (x5)
#
# where "Ganymede: " is {0}, "User Deleted" is {1} (it comes from the
# descriptive title the user put when configuring the ObjectEvent
# object), and 5 is {2}.

#sendObjectMail.multi_object_subject = {0}{1} (x{2,number,#})
sendObjectMail.multi_object_subject = {0}{1} (x{2,number,#})
#sendObjectMail.mailer_error = DBLog.sendObjectMail(): mailer error:\n{0}\n\nwhile processing: {1}
sendObjectMail.mailer_error = DBLog.sendObjectMail(): Mailer-Fehler\n{0}\n\nbeim Bearbeiten von {1}

