#!/bin/sh
#
# Directory Droid Server Run Script
# 
############################

## This section is customized by the server install script

# These lines should be in the form X=Y, with nothing else on
# the line.. they are customized by the installServer.perl
# script

JAVA=/usr/bin/java
RMIREGISTRY=/usr/bin/rmiregistry
RMIPORT=1099
PROPERTIES=ganymede.properties
CLASSPATH=jars/ddroidServer.jar:jars/gnu-regexp-1.1.4.jar:jars/custom.jar:jython/jython.jar:jython/jython-lib.jar
INSTALLDIR=/var/ganymede

############################################### 

# These options control how frequently the Directory Droid server will
# perform full heap GC to insure release of remote (client-side) RMI
# objects.  The Java 1.3 JDK defaults to doing full GC for RMI server
# apps once a minute, but the Directory Droid server never releases
# references to clients or admin consoles unless the client or admin
# console quits/disconnects, in which case there's no need for the
# Directory Droid server to tell the client/console that it can release
# objects.
#
# By setting the RMIGC control values to 3600000, we make the
# Directory Droid server only perform mandatory full-heap GC once an
# hour, letting the lower impact generational garbage collection logic
# handle clean-up of transient objects

RMIGC='-Dsun.rmi.dgc.client.gcInterval=3600000 -Dsun.rmi.dgc.server.gcInterval=3600000'

trap "echo Aborted" 2

echo "Running Directory Droid Server"

export CLASSPATH

# Set a higher upper limit on the number of descriptors so that
# Directory Droid doesn't run out while doing big builds
#
# This may be Solaris-specific, so use with caution if you're on
# another operating system.

#ulimit -n 128

# Run the RMI registry to provide remote name lookup for the server

echo
echo "Attempting to start rmiregistry"

$RMIREGISTRY $RMIPORT &

echo
echo "Started rmiregistry"
echo

# Below this point we have a few choices of invocation lines that
# actually run your JVM on the Directory Droid server..
#
# The minimum requirements to invoke the Directory Droid server is to
# run the jvm on the arlut.csd.ddroid.server.Ganymede class file, with a
# command line parameter thereafter of usedirectory=$INSTALLDIR to give
# the Directory Droid server access to its configuration/database files. 
#
# The optional -resetadmin parameter forces the Directory Droid server
# to reset the root-privileged supergash and the monitor passwords
# from the properties file.  If you forget the supergash password, the
# only way you can change it is to edit the ganymede.properties file
# in the server install directory and set the ganymede.defaultrootpass
# property to what you want the new supergash password to be, and to
# include -resetadmin on the java invocation line so that the
# Directory Droid server will reset its password.
#
# You'll want to see a line that looks like this:
#
# ganymede.defaultrootpass=myNewSekretPassword
#
# It is perfectly reasonable to remove this line from the
# ganymede.properties file once you have the server started with the
# password you want, but if you ever forget, putting this property
# back into the ganymede.properties file and specifying -resetadmin
# will let you reinitialize the supergash password.
#
# The optional -logrmi parameter causes the Directory Droid
# server to log all RMI calls made to it, as well as any exceptions
# that are thrown in response to RMI calls.  If the server is throwing
# an exception in response to something someone does in a Directory
# Droid client or with the admin console, the RMI debug log will
# capture the exception's stack trace.
#
# If you use -logrmi as a switch, the RMI log will be placed in
# $INSTALLDIR/debug.log.  If you want to specify a different path
# to the RMI log, you can use logrmi as an assignment on the command
# line, as in
#
#	logrmi=/var/log/ddroid/rmi.log
#
# or the like.
#
# The optional -forcelocalhost parameter will force the Directory
# Droid server to ignore the fact that the configured hostname will
# map to the 127.0.0.1 loopback address.  If the Directory Droid
# server prints an error message and refuses to start due to some
# problem relating to 127.0.0.1, adding -forcelocalhost to the java
# invocation line will tell the Directory Droid server not to be so
# picky.  You'll then be able to use the Directory Droid server from
# the local system, at least.  See the Directory Droid FAQ for more
# details on this option.
#
# The optional -suppressEmail parameter will force the Directory
# Droid server to *not* send any email notifications for any reason.
# Think of it as an email "master cutoff switch".
#
# The optional telnet=<portnumber> parameter, if provided, causes the
# Directory Droid server to open a Jython interpreter service on port
# <portnumber> which a Directory Droid administrator with adequate
# privileges can telnet to.  The Jython interpreter only allows
# local logins, made from the local machine that is running the
# Directory Droid server, to avoid allowing Directory Droid account
# and password names from going over unprotected telnet.
#
# The -resetadmin, -forcelocalhost, -suppressEmail, telnet, and
# -logrmi or logrmi=XXX parameters should be placed on the invocation
# line after arlut.csd.ddroid.server.Ganymede.

# Other options included below include the -Xms32m and -Xmx128m jvm
# options, which force a minimum heap size of 32 megabytes and a
# maximum heap size of 128 megabytes.  If you are running an unusally
# large Directory Droid installation, you may want to increase the
# maximum heap size to something greater than 128 megabytes.

#			     ----====----

# The following line runs with HotSpot JITTING on.  Any exceptions
# thrown by the server will not include line numbers, but the
# '-logrmi' option does cause RMI calls to the
# server to be logged to $INSTALLDIR/debug.log.

$JAVA -Xms32m -Xmx128m $RMIGC arlut.csd.ddroid.server.Ganymede -resetadmin -logrmi usedirectory=$INSTALLDIR

#			     ----====----

# The following line runs in non-JITTED mode through the
# -Djava.compiler=NONE option and supports runtime debugger attaching
# through the -Xdebug command line option, which can be useful in
# debugging deadlock conditions.
#
# NOTE: Some versions of the 1.2 (and 1.3?) JDK require additional boot classpath
# information on the invocation line when using -Xdebug to support remote
# debugging.  You'll need to edit this line to either take out the -Xdebug
# and -Xbootclasspath options, or you'll need to set the appropriate bootpath
# for your JDK installation.

#$JAVA -Xdebug -Djava.compiler=NONE -Xms32m -Xmx128m $RMIGC -Xbootclasspath:/usr/java1.2/jre/lib/rt.jar:/usr/java1.2/lib/tools.jar arlut.csd.ddroid.server.Ganymede -resetadmin -logrmi usedirectory=$INSTALLDIR
